306c306
< function log_error_graph_gen(iterations::Int, method, name::String, file_name::String, prec::BigFloat)
---
> function log_error_graph_gen(iterations::Int, method, name::String, file_name::String)
310c310
<     relog = map(x -> -1 * log(abs(x)), rel)
---
>     relog = map(x -> log(abs(x)), rel)
312,319d311
<     prec_lim = Vector{BigFloat}([])
<     for x in 1:length(relog)
<         append!(prec_lim, [prec])
<     end
<     p = plot(x, [relog prec_lim], title = "Wykres zbieżności metody:\n" * name, xlabel = "liczba iteracji", label = ["ilość cyfr znaczących" "granica precyzji"], legend=:outerbottom)
<     savefig(p, file_name  * "_log_error.png")
<     display(p)
< end
321,327c313
< function log_error_graph_gen_no_l(iterations::Int, method, name::String, file_name::String)
<     results = method(iterations)
<     ab = calc_abs(results, BigFloat(pi))
<     rel = calc_rel(ab, BigFloat(pi))
<     relog = map(x -> -1 * log(abs(x)), rel)
<     x = 1:length(relog)
<     p = plot(x, [relog], title = "Wykres zbieżności metody:\n" * name, xlabel = "liczba iteracji", label = "ilość cyfr znaczących" , legend=:outerbottom, c=:pink)
---
>     p = plot(x, relog, title = "Wykres zbieżności metody:\n" * name, xlabel = "liczba iteracji", label = "log |błąd wzgledny|")
332,343d317
< function estimate_precision(iterations::Int, method)
<     results = method(iterations)
<     ab = calc_abs(results, BigFloat(pi))
<     rel = calc_rel(ab, BigFloat(pi))
<     relog = map(x -> -1 * log(abs(x)), rel)
<     maks = BigFloat(0)
<     for i in 1:length(relog)
<         maks = max(maks, relog[i])
<     end
<     return maks
< end
< 
358,375d331
< function calc_p(c::BigFloat, p::BigFloat, pp::BigFloat)
<     pii = BigFloat(pi)
<     return log(abs(pp - pii) / abs(p - pii)) / log(abs(p - pii) / abs(c - pii))
< end
< 
< function display_calculated_p(func, iterations::Int, name::String, file_name::String)
<     results = func(iterations)
<     ps = Vector{BigFloat}([])
<     for i in 1:(iterations-2)
<         p = calc_p(results[i], results[i+1], results[i+2])
<         append!(ps, p)
<     end
<     x = 1:length(ps)
<     p = plot(x, ps, title="Wartośc p dla metody:\n" * name, label="p", xlabel = "iteracja", c=:pink)
<     savefig(p, file_name  * "_error_ratio.png")
<     display(p)
< end
< 
379,403c335,350
<     z = estimate_precision(10000, viete.calc_steps)
<     log_error_graph_gen(10000, geometry3.calc_steps, "Przybliżania wielokątami", "geo3", z)
<     log_error_graph_gen_no_l(10000, montecarlo.calc_steps, "Monte carlo", "monte_carlo")
<     log_error_graph_gen_no_l(10000, taylor.calc_steps, "Wielomian Taylora", "taylor")
<     log_error_graph_gen(21, gauss_legendre.calc_steps, "Gauss-Legendre'a", "gauss_legendre", z)
<     log_error_graph_gen(450, chudnowsky.calc_steps, "Algorytm Chudnovskych", "chudnowsky", z)
<     log_error_graph_gen(10000, viete.calc_steps, "Algorytm Viete'a", "viete", z)
<     log_error_graph_gen(740, ramanujan.calc_steps, "Wzór Srinivasa Ramanujana", "ramanujan", z)
< 
<     #convergence_experiment(taylor.calc_steps,10000, 1, "Taylor'a", "taylor")
<     #convergence_experiment(chudnowsky.calc_steps,450, 1, "Chudnovskych", "chudnowsky")
<     #convergence_experiment(viete.calc_steps,8000, 1, "Viete'a", "viete")
<     #convergence_experiment(geometry3.calc_steps,1000, 1, "Przybliżania wielokątami", "geo3")
<     #convergence_experiment(ramanujan.calc_steps, 450, 1, "Srinivasa Ramanujana", "ramanujan")
<     #convergence_experiment(gauss_legendre.calc_steps, 21, 2, "Gauss-Legendre'a", "gauss_legendre")
<     #convergence_experiment(montecarlo.calc_steps, 1000, 1, "Monte carlo", "monte_carlo")
< 
< 
<     display_calculated_p(taylor.calc_steps,10000,  "Taylor'a", "taylor")
<     display_calculated_p(chudnowsky.calc_steps,450, "Chudnovskych", "chudnowsky")
<     display_calculated_p(viete.calc_steps,8000,  "Viete'a", "viete")
<     display_calculated_p(geometry3.calc_steps,1000,  "Przybliżania wielokątami", "geo3")
<     display_calculated_p(ramanujan.calc_steps, 450,  "Srinivasa Ramanujana", "ramanujan")
<     display_calculated_p(gauss_legendre.calc_steps, 21,  "Gauss-Legendre'a", "gauss_legendre")
<     display_calculated_p(montecarlo.calc_steps, 1000,  "Monte carlo", "monte_carlo")
---
>     log_error_graph_gen(10000, geometry3.calc_steps, "Przybliżania wielokątami", "geo3")
>     log_error_graph_gen(10000, montecarlo.calc_steps, "Monte carlo", "monte_carlo")
>     log_error_graph_gen(10000, taylor.calc_steps, "Szereg Taylora", "taylor")
>     log_error_graph_gen(21, gauss_legendre.calc_steps, "Gauss-Legendre'a", "gauss_legendre")
>     log_error_graph_gen(450, chudnowsky.calc_steps, "Algorytm Chudnovsky'ich", "chudnowsky")
>     log_error_graph_gen(10000, viete.calc_steps, "Algorytm Viete'a", "viete")
>     log_error_graph_gen(740, ramanujan.calc_steps, "Wzór Srinivasa Ramanujana", "ramanujan")
> 
>     convergence_experiment(taylor.calc_steps,10000, 1, "Taylor'a", "taylor")
>     convergence_experiment(chudnowsky.calc_steps,450, 1, "Chudnovsky'ich", "chudnowsky")
>     convergence_experiment(viete.calc_steps,8000, 1, "Viete'a", "viete")
>     convergence_experiment(geometry3.calc_steps,1000, 1, "Przybliżania wielokątami", "geo3")
>     convergence_experiment(ramanujan.calc_steps, 450, 1, "Srinivasa Ramanujana", "ramanujan")
> 
>     convergence_experiment(gauss_legendre.calc_steps, 21, 2, "Gauss-Legendre'a", "gauss_legendre")
>     convergence_experiment(montecarlo.calc_steps, 1000, 1, "Monte carlo", "monte_carlo")
406c353
< z = estimate_precision(10000, viete.calc_steps)
---
> 
